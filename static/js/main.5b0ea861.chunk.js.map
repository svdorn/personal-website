{"version":3,"sources":["withStyles.js","MyTheme.js","components/Social.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["ThemedStyleSheet","registerTheme","color","primary","secondary","registerInterface","aphroditeInterface","icons","name","href","withStyles","container","display","marginLeft","marginTop","float","alignItems","image","margin","opacity",":hover","_ref","styles","react_default","a","createElement","css","map","icon","Object","assign","key","src","concat","alt","Header","this","props","components_Social","React","Component","padding","fontSize","textAlign","components_Header","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAMAA,IAAiBC,cCNF,CACbC,MAAO,CACLC,QAAS,UACTC,UAAW,aDIfJ,IAAiBK,kBAAkBC,KEHnC,IAAMC,EAAQ,CACZ,CAAEC,KAAM,UAAWC,KAAM,IACzB,CAAED,KAAM,WAAYC,KAAM,IAC1B,CAAED,KAAM,SAAUC,KAAM,IACxB,CAAED,KAAM,WAAYC,KAAM,IAC1B,CAAED,KAAM,YAAaC,KAAM,KAmBdC,2BAAW,iBAAO,CAC/BC,UAAW,CACTC,QAAS,eACTC,WAAY,OACZC,UAAW,MACXC,MAAO,OACPC,WAAY,UAGdC,MAAO,CACLC,OAAQ,QACRC,QAAS,MACTC,SAAU,CACRD,QAAS,UAbAT,CAhBf,SAAAW,GAA4B,IAAVC,EAAUD,EAAVC,OAChB,OACEC,EAAAC,EAAAC,cAAA,MAASC,cAAIJ,EAAOX,WACjBJ,EAAMoB,IAAI,SAAAC,GAAI,OACbL,EAAAC,EAAAC,cAAA,IAAAI,OAAAC,OAAA,GAAOJ,cAAIJ,EAAOL,OAAlB,CAA0BR,KAAMmB,EAAKnB,KAAMsB,IAAKH,EAAKpB,OACnDe,EAAAC,EAAAC,cAAA,OAAKO,IAAG,kBAAAC,OAAoBL,EAAKpB,KAAzB,QAAqC0B,IAAKN,EAAKpB,aCZ3D2B,mLACK,IACCb,EAAWc,KAAKC,MAAhBf,OAER,OACEC,EAAAC,EAAAC,cAAA,MAASC,cAAIJ,EAAOX,WAClBY,EAAAC,EAAAC,cAAA,IAAOC,cAAIJ,EAAOd,MAAlB,gBACAe,EAAAC,EAAAC,cAACa,EAAD,cAPaC,IAAMC,WAaZ9B,uBAAW,SAAAW,GAAA,MAAgB,CACxCV,UAAW,CACT8B,QAAS,QAGXjC,KAAM,CACJI,QAAS,eACTG,MAAO,OACPb,MARsBmB,EAAGnB,MAQZC,QACbuC,SAAU,OACV1B,WAAY,YAVDN,CAYXyB,GClBWzB,2BAAW,iBAAO,CAC/BC,UAAW,CACTgC,UAAW,YAFAjC,CARf,SAAAW,GAAyB,IAAVC,EAAUD,EAAVC,OACb,OACEC,EAAAC,EAAAC,cAAA,MAASC,cAAIJ,EAAOX,WAClBY,EAAAC,EAAAC,cAACmB,EAAD,SCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5b0ea861.chunk.js","sourcesContent":["import ThemedStyleSheet from \"react-with-styles/lib/ThemedStyleSheet\";\nimport aphroditeInterface from \"react-with-styles-interface-aphrodite\";\nimport { css, withStyles } from \"react-with-styles\";\n\nimport MyTheme from \"./MyTheme\";\n\nThemedStyleSheet.registerTheme(MyTheme);\nThemedStyleSheet.registerInterface(aphroditeInterface);\n\nexport { css, withStyles, ThemedStyleSheet };\n","export default {\n  color: {\n    primary: \"#FF5A5F\",\n    secondary: \"#00A699\"\n  }\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { css, withStyles } from \"../withStyles\";\n\nconst icons = [\n  { name: \"twitter\", href: \"\" },\n  { name: \"linkedin\", href: \"\" },\n  { name: \"github\", href: \"\" },\n  { name: \"facebook\", href: \"\" },\n  { name: \"instagram\", href: \"\" }\n];\n\nfunction Social({ styles }) {\n  return (\n    <div {...css(styles.container)}>\n      {icons.map(icon => (\n        <a {...css(styles.image)} href={icon.href} key={icon.name}>\n          <img src={`/images/social/${icon.name}.png`} alt={icon.name} />\n        </a>\n      ))}\n    </div>\n  );\n}\n\nSocial.propTypes = {\n  styles: PropTypes.object.isRequired\n};\n\nexport default withStyles(() => ({\n  container: {\n    display: \"inline-block\",\n    marginLeft: \"50px\",\n    marginTop: \"5px\",\n    float: \"left\",\n    alignItems: \"center\"\n  },\n\n  image: {\n    margin: \"0 5px\",\n    opacity: \"0.4\",\n    \":hover\": {\n      opacity: \"0.6\"\n    }\n  }\n}))(Social);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Social from \"./Social\";\nimport { css, withStyles } from \"../withStyles\";\n\nclass Header extends React.Component {\n  render() {\n    const { styles } = this.props;\n\n    return (\n      <div {...css(styles.container)}>\n        <b {...css(styles.name)}>Stephen Dorn</b>\n        <Social />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(({ color }) => ({\n  container: {\n    padding: \"20px\"\n  },\n\n  name: {\n    display: \"inline-block\",\n    float: \"left\",\n    color: color.primary,\n    fontSize: \"34px\",\n    alignItems: \"center\"\n  }\n}))(Header);\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport { css, withStyles } from \"./withStyles\";\n\nfunction App({ styles }) {\n  return (\n    <div {...css(styles.container)}>\n      <Header />\n    </div>\n  );\n}\n\nexport default withStyles(() => ({\n  container: {\n    textAlign: \"center\"\n  }\n}))(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}